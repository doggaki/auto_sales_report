---
title: "Sales Report"
output: 
  flexdashboard::flex_dashboard:
    orientation: rows  #change this to "rows"
---
<!--color of navbar in css -->
<style>                     
.navbar {
  background-color:#003D79;
  border-color:white;
}
.navbar-brand {
color:white!important;
}
</style>

```{r, setup, include=FALSE}
#needed setup and libraries
knitr::opts_chunk$set(echo = TRUE)
library(flexdashboard)
library(tidyverse)
library(ggpubr)
library(kableExtra)
library(plotly)
library(xts)
library(lubridate)
library(ggplot2)
library(dplyr)
```

<!--First dashboard with 3 rows -->
Dashboard {data-icon="fa-tachometer-alt"}
=============================
<!--First row -->
Row {data-width=650, data-height=150}
--------------------------------------

### Time Frame In Days 
```{r,echo=FALSE}
options(dplyr.summarise.inform = FALSE)
# read sales file in csv format
clients <- read.csv("supermarket_sales.csv")
#create separate tibble to evaluate time frame in days
strDates <- c(clients$Date)
n<-nrow(clients)
data_frame <- tibble(strDates)
df <-data_frame[order(strDates),]
df2<-c(df)
#last date - first date = time frame 
time1 <- as.Date(df2$strDates[1], "%m/%d/%Y")
time2 <- as.Date(df2$strDates[n], "%m/%d/%Y")
time_diff<-difftime(time2, time1, units = "days") 
as_time_1<-as.numeric(time_diff, units = "days")
#value box from flexdashboard to display time frame 
valueBox(value = as_time_1,icon = "fa-th", caption = "Time Frame In Days", color = "grey")
```

### Total Sales Count 
```{r , echo=FALSE}
#number of sales is number clients number of rows
total_sales<-nrow(clients)
#value box to display sales count
valueBox(value = total_sales,icon = "fa-chalkboard",caption = "Total Sales Count",color = "#8A2BE2")
```

### Gross Revenue
```{r,echo=FALSE}
#evaluate gross revenue
gross<-cumsum(clients$gross.income)
total_gross<-gross[length(gross)]
total_gross<-format(total_gross, digits=6, decimal.mark=",", big.mark= ".")
#value box to display  gross gross revenue
valueBox(value = total_gross,icon = "fa-dollar",caption = "Gross Revenue in Dollars", color = "red")
```


### Average Sales Per Day
```{r,echo=FALSE}
#evaluate sales per day
avg_sales<-n/as_time_1
avg_sales<-round(avg_sales)
#value box to display  sales per day
valueBox(value = avg_sales,icon = "fa-chart-line", caption = "Average Sales Per Day", color = "#87CEEB")
```

### Average Customer Rating
```{r,echo=FALSE}
#evaluate average customer rating
average_rating=mean(clients$Rating)
average_rating<-format(average_rating, digits=3, big.mark= ".")
#value box to display in different colors the average customer rating depending on value
if(average_rating>6){
  valueBox(value = average_rating,icon = "fa-star",caption = "Average Customer Rating", color = "coral")
} else{
valueBox(value = average_rating,icon = "far fa-star-half",caption = "Average Customer Rating", color = "Red")}
```

<!--Second row -->
Row{data-width=350, data-height=450}
----------------------------------

### Sales Per Branch
```{r, echo=FALSE}
#needed setup for dplyr
options(dplyr.summarise.inform = FALSE)
#group by branch
df_branch <- clients %>%
  group_by(Branch, .drop = FALSE) %>%
  summarize(Count = n())
#pie chart in plotly for sales per branch
colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)', 'rgb(114,147,203)')
plot_ly(df_branch, labels = ~Branch, values = ~Count, type = 'pie' ,
        textposition = 'inside',
        textinfo = 'label+percent',
        insidetextfont = list(color = '#FFFFFF'),
        hoverinfo = 'text',
        text = ~paste(Count, ' Purchases'),marker = list(colors = colors,
                      line = list(color = '#FFFFFF', width = 1)))
```

### Sales Per Product Line
```{r, echo=FALSE}
#needed setup for dply
options(dplyr.summarise.inform = FALSE)
#group by product line and bar graph in plotly for sales per branch
clients %>% 
  group_by(Product.line, .drop= FALSE) %>% 
  count(Product.line) %>% 
  mutate(Product.line = fct_reorder(Product.line, n)) %>%
  plot_ly(x = ~Product.line, y = ~n, color = ~Product.line, type = "bar")
```



###  Sales Distribution By Gender
```{r, echo=FALSE}
#needed setup for dply
options(dplyr.summarise.inform = FALSE)
#group by gender
df_gender<- clients %>%
  group_by(Gender, .drop = FALSE) %>%
  summarize(counts = n())
#donut graph in plotly for sales distribution by gender
plot_ly(df_gender) %>% 
  add_pie(labels=df_gender$Gender,values=df_gender$counts,hole=0.6)
```

<!--Third row -->
Row
----------------------------------


### Customers Distribution By Type {data-width=250}
```{r, echo=FALSE}
#needed setup for dply
options(dplyr.summarise.inform = FALSE)
#group by customer type
client_type <- clients %>%
  group_by(Customer.type, .drop = FALSE) %>%
  summarize(Customers = n())
#horizontal bar graph in ggplot by customer type
ggplot(client_type, aes(x = Customer.type, y = Customers)) +
  geom_bar(fill = c("#0073C2FF", "#FF0000"), stat = "identity") +
  geom_text(aes(label = Customers), vjust = -0.3)+
  coord_flip()
```


###  Purchases Timeline {data-width=550}
```{r, echo=FALSE}
#group by date of purchase
dates <- clients %>%
  group_by(Date, .drop = FALSE) %>%
  summarize(Purchases = n()) %>%
  mutate(Date = lubridate::mdy(Date)) %>%
  mutate(Date=format(Date,"%d-%m-%Y")) %>%
  arrange(desc(Purchases))
#time series in plotly for purchases in the given time frame
Dates<-dates$Date
Dates<-as.Date(dates$Date,"%d-%m-%Y" )
plot_ly(dates, x = ~Dates, y = ~Purchases, mode = 'lines')%>% add_lines()
```


### Payment Methods Usage By Type {data-width=250}

```{r, echo=FALSE}
#group by payment type
df_type <- clients %>%
  group_by(Payment, .drop = FALSE) %>%
  summarize(counts = n())
#gauge from flexdashboard to display payment methods usage by type
gauge((df_type$counts[1]/1000)*100, min = 0, max = 100, label = 'Cash',symbol='%', gaugeSectors(
  success = c(30, 100), warning = c(60, 79), danger = c(0, 9)
))
gauge((df_type$counts[2]/1000)*100, min = 0, max = 100, label = 'Credit card',symbol='%', gaugeSectors(
  success = c(10, 20), warning = c(31, 50), danger = c(0, 9)
))
gauge((df_type$counts[3]/1000)*100, min = 0, max = 100, label = 'Ewallet',symbol='%', gaugeSectors(
  success = c(80, 100), warning = c(40, 79), danger = c(30, 90)
))
```


<!--this dashboard tab creates a random subset from the clients dataframe and reevaluates the above again in three rows-->
Random Subset Evaluation {data-icon="fa-random"} 
===
<!--First row -->
Row {data-width=650, data-height=150}
--------------------------------------

<style>
.colored{
  background-color: #FFD700;
}
</style>

### ![Caption](Info.png) { .colored }

**This tab creates a random subset and reevaluates all information**

### Time Frame In Days 
```{r,echo=FALSE}
options(dplyr.summarise.inform = FALSE)
# read sales file in csv format
clients <- read.csv("supermarket_sales.csv")
# a random subset from the original dataframe created from random elements
rand_seed<-sample(1:600,1)
rand_vector<-c(sample(1:1000, rand_seed, replace=FALSE))
clients <- clients[-rand_vector,] 
df <-data_frame[order(strDates),]
df2<-c(df)
#evalute new time frame
time1 <- as.Date(df2$strDates[1], "%m/%d/%Y")
time2 <- as.Date(df2$strDates[n], "%m/%d/%Y")
time_diff<-difftime(time2, time1, units = "days") 
as_time_1<-as.numeric(time_diff, units = "days")
#gauge from flexdashboard to display time frame
valueBox(value = as_time_1,icon = "fa-th", caption = "Time Frame In Days", color = "grey")
```

### Total Sales Count 
```{r , echo=FALSE}
#number of sales is number clients number of rows
total_sales<-nrow(clients)
#value box to display sales count
valueBox(value = total_sales,icon = "fa-chalkboard",caption = "Total Sales Count",color = "#8A2BE2")
```

### Gross Revenue
```{r,echo=FALSE}
#evaluate gross revenue
gross<-cumsum(clients$gross.income)
total_gross<-gross[length(gross)]
total_gross<-format(total_gross, digits=6, decimal.mark=",", big.mark= ".")
#value box to display  gross gross revenue
valueBox(value = total_gross,icon = "fa-dollar",caption = "Gross Revenue in Dollars", color = "red")
```


### Average Sales Per Day
```{r,echo=FALSE}
#evaluate sales per day
avg_sales<-n/as_time_1
avg_sales<-round(avg_sales)
#value box to display  sales per day
valueBox(value = avg_sales,icon = "fa-chart-line", caption = "Average Sales Per Day", color = "#87CEEB")
```

### Average Customer Rating
```{r,echo=FALSE}
#evaluate average customer rating
average_rating=mean(clients$Rating)
average_rating<-format(average_rating, digits=3, big.mark= ".")
#value box to display in different colors the average customer rating depending on value
if(average_rating>6){
  valueBox(value = average_rating,icon = "fa-star",caption = "Average Customer Rating", color = "coral")
} else{
valueBox(value = average_rating,icon = "far fa-star-half",caption = "Average Customer Rating", color = "Red")}
```

<!--Second row -->
Row{data-width=350, data-height=450}
----------------------------------

### Sales Per Branch
```{r, echo=FALSE}
#needed setup for dplyr
options(dplyr.summarise.inform = FALSE)
#group by branch
df_branch <- clients %>%
  group_by(Branch, .drop = FALSE) %>%
  summarize(Count = n())
#pie chart in plotly for sales per branch
colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)', 'rgb(114,147,203)')
plot_ly(df_branch, labels = ~Branch, values = ~Count, type = 'pie' ,
        textposition = 'inside',
        textinfo = 'label+percent',
        insidetextfont = list(color = '#FFFFFF'),
        hoverinfo = 'text',
        text = ~paste(Count, ' Purchases'),marker = list(colors = colors,
                      line = list(color = '#FFFFFF', width = 1)))
```

### Sales Per Product Line
```{r, echo=FALSE}
#needed setup for dply
options(dplyr.summarise.inform = FALSE)
#group by product line and bar graph in plotly for sales per branch
clients %>% 
  group_by(Product.line, .drop= FALSE) %>% 
  count(Product.line) %>% 
  mutate(Product.line = fct_reorder(Product.line, n)) %>%
  plot_ly(x = ~Product.line, y = ~n, color = ~Product.line, type = "bar")
```



###  Sales Distribution By Gender
```{r, echo=FALSE}
#needed setup for dply
options(dplyr.summarise.inform = FALSE)
#group by gender
df_gender<- clients %>%
  group_by(Gender, .drop = FALSE) %>%
  summarize(counts = n())
#donut graph in plotly for sales distribution by gender
plot_ly(df_gender) %>% 
  add_pie(labels=df_gender$Gender,values=df_gender$counts,hole=0.6)
```

<!--Third row -->
Row
----------------------------------


### Customers Distribution By Type {data-width=250}
```{r, echo=FALSE}
#needed setup for dply
options(dplyr.summarise.inform = FALSE)
#group by customer type
client_type <- clients %>%
  group_by(Customer.type, .drop = FALSE) %>%
  summarize(Customers = n())
#horizontal bar graph in ggplot by customer type
ggplot(client_type, aes(x = Customer.type, y = Customers)) +
  geom_bar(fill = c("#0073C2FF", "#FF0000"), stat = "identity") +
  geom_text(aes(label = Customers), vjust = -0.3)+
  coord_flip()
```


###  Purchases Timeline {data-width=550}
```{r, echo=FALSE}
#group by date of purchase
dates <- clients %>%
  group_by(Date, .drop = FALSE) %>%
  summarize(Purchases = n()) %>%
  mutate(Date = lubridate::mdy(Date)) %>%
  mutate(Date=format(Date,"%d-%m-%Y")) %>%
  arrange(desc(Purchases))
#time series in plotly for purchases in the given time frame
Dates<-dates$Date
Dates<-as.Date(dates$Date,"%d-%m-%Y" )
plot_ly(dates, x = ~Dates, y = ~Purchases, mode = 'lines')%>% add_lines()
```


### Payment Methods Usage By Type {data-width=250}

```{r, echo=FALSE}
#group by payment type
df_type <- clients %>%
  group_by(Payment, .drop = FALSE) %>%
  summarize(counts = n())
#gauge from flexdashboard to display payment methods usage by type
gauge((df_type$counts[1]/1000)*100, min = 0, max = 100, label = 'Cash',symbol='%', gaugeSectors(
  success = c(30, 100), warning = c(60, 79), danger = c(0, 9)
))
gauge((df_type$counts[2]/1000)*100, min = 0, max = 100, label = 'Credit card',symbol='%', gaugeSectors(
  success = c(10, 20), warning = c(31, 50), danger = c(0, 9)
))
gauge((df_type$counts[3]/1000)*100, min = 0, max = 100, label = 'Ewallet',symbol='%', gaugeSectors(
  success = c(80, 100), warning = c(40, 79), danger = c(30, 90)
))
```
